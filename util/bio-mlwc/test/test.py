import os
import sys
import unittest
from IO_util import read_xyz
from compare_MLWC import accuracy_stats, redundancy_stats, print_accuracy_stats, print_redundancy_stats

# run this from the test/ folder

class DisulfideTests(unittest.TestCase):
	"""
	Tests the number of geometrically generated MLWCs, their possible redundancy, and their accuracy
	comapred to the O(N^3) solution for the 4-residue disulfide.pdb system from the protein template files
	"""

	@classmethod
	def setUpClass(self):
		# geometrically generate MLWCs, specifying the charge (0), the number of MLWCs to generate (65)
		# and addition and removal methods (both far)
		os.chdir("..")
		os.system("python calculate_mlwcs.py protein protein/template_files/disulfide.pdb test/disulfide-mlwc-geom.xyz -c 0 -n 65 -a far -r far")
		os.chdir("test")

		# read MLWCs generated by O(N^3) quench into variable
		with open("../protein/template_files/disulfide-mlwc.xyz", "r") as mlwc_file:
			self.quench_mlwc_coords = read_xyz(mlwc_file)

		# read geometrically generated MLWCs into variable
		with open("disulfide-mlwc-geom.xyz", "r") as mlwc_file:
			self.geom_mlwc_coords = read_xyz(mlwc_file)

	# test that the geometric mapping generates the same number of MLWCs as quench
	def test_num_mlwcs(self):
		self.assertEqual(
			len(self.quench_mlwc_coords),
			len(self.geom_mlwc_coords),
			"incorrect number of MLWCs generated: {} by geometry, {} by quench".format(len(self.geom_mlwc_coords), len(self.quench_mlwc_coords))
		)

	# test that the geometric mapping does not generate redundant MLWCs extremely close together,
	# as this could cause difficulties with the Gram matrix
	def test_redundancy(self):
		print "\n======================================================================"
		print "REDUNDANCY STATISTICS"
		min_norm, min_indices, min_vec = redundancy_stats(self.geom_mlwc_coords)
		print_redundancy_stats((min_norm, min_indices, min_vec))

		self.assertTrue(
			min_norm > 1e-3,
			"MLWCs generated too close together: MLWCs {} and {} are only {} Bohr apart".format(
				min_indices[0], min_indices[1], min_norm
			)
		)

	# test that the geometrically-generated MLWCs are close to the MLWCs generated by O(N^3) quench
	def test_acuracy(self):
		print "\n======================================================================"
		print "ACCURACY STATISTICS"
		avg_norm, min_norm, max_norm, max_indices, max_vec = accuracy_stats(self.geom_mlwc_coords, self.quench_mlwc_coords)
		print_accuracy_stats((avg_norm, min_norm, max_norm, max_indices, max_vec), "disulfide-mlwc-geom.xyz", "../protein/template_files/disulfide-mlwc.xyz")

		self.assertTrue(
			max_norm < 0.5,
			"MLWCs generated by geometric maps and by quench are too far apart: geometric MLWC {} and quench MLWC {} are {} Bohr apart".format(
				max_indices[0], max_indices[1], max_norm
			)
		)

	@classmethod
	def tearDownClass(self):
		os.remove("disulfide-mlwc-geom.xyz")


if __name__ == '__main__':
	unittest.main()
